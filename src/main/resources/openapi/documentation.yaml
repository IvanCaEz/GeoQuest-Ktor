openapi: "3.0.3"
info:
  title: "GeoQuest_KtorAPI API"
  description: "GeoQuest_KtorAPI API"
  version: "1.0.0"
servers:
- url: "https://GeoQuest_KtorAPI"
paths:
  /reports:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "No reports found"
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Reports"
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /treasure:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  type: "object"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "No treasures found."
    post:
      description: ""
      responses:
        "201":
          description: "Created"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /treasure/{treasureID}:
    delete:
      description: ""
      parameters:
      - name: "treasureID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing treasure id."
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    get:
      description: ""
      parameters:
      - name: "treasureID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing treasure id."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Treasures"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    put:
      description: ""
      parameters:
      - name: "treasureID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing treasure id."
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /treasure/{treasureID}/games:
    post:
      description: ""
      parameters:
      - name: "treasureID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing treasure id."
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /treasure/{treasureID}/picture:
    get:
      description: ""
      parameters:
      - name: "treasureID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing treasure id."
        "200":
          description: "OK <br> A file response"
          content:
            application/*:
              schema:
                type: "object"
                format: "binary"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "No image found."
  /treasure/{treasureID}/reports:
    get:
      description: ""
      parameters:
      - name: "treasureID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing treasure id."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Reports"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /treasure/{treasureID}/reports/{reportID}:
    delete:
      description: ""
      parameters:
      - name: "treasureID"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "reportID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing report id."
                Example#2:
                  value: "Missing treasure id."
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    get:
      description: ""
      parameters:
      - name: "treasureID"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "reportID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing report id."
                Example#2:
                  value: "Missing treasure id."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Reports"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /treasure/{treasureID}/reviews:
    get:
      description: ""
      parameters:
      - name: "treasureID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing treasure id."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Reviews"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    post:
      description: ""
      parameters:
      - name: "treasureID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing user id."
        "201":
          description: "Created"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /treasure/{treasureID}/reviews/{reviewID}:
    delete:
      description: ""
      parameters:
      - name: "treasureID"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "reviewID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing review id."
                Example#2:
                  value: "Missing treasure id."
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    get:
      description: ""
      parameters:
      - name: "treasureID"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "reviewID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing review id."
                Example#2:
                  value: "Missing user id."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Reviews"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    put:
      description: ""
      parameters:
      - name: "treasureID"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "reviewID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing review id."
                Example#2:
                  value: "Missing user id."
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /treasure/{treasureID}/reviews/{reviewID}/picture:
    get:
      description: ""
      parameters:
      - name: "treasureID"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "reviewID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing review id."
                Example#2:
                  value: "Missing user id."
        "200":
          description: "OK <br> A file response"
          content:
            application/*:
              schema:
                type: "object"
                format: "binary"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "No image found."
  /treasure/{treasureID}/score:
    put:
      description: ""
      parameters:
      - name: "treasureID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing treasure id."
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /treasure/{treasureID}/stats:
    get:
      description: ""
      parameters:
      - name: "treasureID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing treasure id."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TreasureStats"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /user:
    post:
      description: ""
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
  /user/{userID}:
    delete:
      description: ""
      parameters:
      - name: "userID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing user id."
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    get:
      description: ""
      parameters:
      - name: "userID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing user id."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    put:
      description: ""
      parameters:
      - name: "userID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing user id."
        "202":
          description: "Accepted"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /user/{userID}/favs:
    get:
      description: ""
      parameters:
      - name: "userID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing user id."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  type: "object"
        "202":
          description: "Accepted"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    post:
      description: ""
      parameters:
      - name: "userID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing user id."
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /user/{userID}/favs/{treasureID}:
    delete:
      description: ""
      parameters:
      - name: "userID"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "treasureID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing treasure id."
                Example#2:
                  value: "Missing user id."
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    get:
      description: ""
      parameters:
      - name: "userID"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "treasureID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing treasure id."
                Example#2:
                  value: "Missing user id."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "boolean"
  /user/{userID}/level:
    put:
      description: ""
      parameters:
      - name: "userID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing user id."
        "202":
          description: "Accepted"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /user/{userID}/picture:
    get:
      description: ""
      parameters:
      - name: "userID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing user id."
        "200":
          description: "OK <br> A file response"
          content:
            application/*:
              schema:
                type: "object"
                format: "binary"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "No image found."
  /user/{userID}/reports:
    get:
      description: ""
      parameters:
      - name: "userID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing user id."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Reports"
        "202":
          description: "Accepted"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Reports"
  /user/{userID}/reports/{reportID}:
    delete:
      description: ""
      parameters:
      - name: "userID"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "reportID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing report id."
                Example#2:
                  value: "Missing user id."
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    get:
      description: ""
      parameters:
      - name: "userID"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "reportID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing report id."
                Example#2:
                  value: "Missing user id."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Reports"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /user/{userID}/reviews:
    get:
      description: ""
      parameters:
      - name: "userID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing user id."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Reviews"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Reviews"
  /user/{userID}/reviews/{reviewID}:
    get:
      description: ""
      parameters:
      - name: "userID"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "reviewID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing review id."
                Example#2:
                  value: "Missing user id."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Reviews"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /user/{userID}/stats:
    get:
      description: ""
      parameters:
      - name: "userID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing user id."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /user/{userID}/treasures:
    get:
      description: ""
      parameters:
      - name: "userID"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing user id."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Treasures"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Treasures"
  /user/login:
    post:
      description: ""
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "The request is null."
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Username not found."
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Incorrect password"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /user/secret:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /user/username/{userName}:
    get:
      description: ""
      parameters:
      - name: "userName"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing username."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /json/kotlinx-serialization:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map"
components:
  schemas:
    Reports:
      type: "object"
      properties:
        idReport:
          type: "integer"
          format: "int32"
        idUser:
          type: "integer"
          format: "int32"
        idTreasure:
          type: "integer"
          format: "int32"
        reportInfo:
          type: "string"
        reportDate:
          type: "string"
    Treasures:
      type: "object"
      properties:
        idTreasure:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        description:
          type: "string"
        image:
          type: "string"
        latitude:
          type: "number"
          format: "double"
        longitude:
          type: "number"
          format: "double"
        location:
          type: "string"
        clue:
          type: "string"
        status:
          type: "string"
        difficulty:
          type: "string"
        score:
          type: "number"
          format: "double"
    Reviews:
      type: "object"
      properties:
        idReview:
          type: "integer"
          format: "int32"
        idTreasure:
          type: "integer"
          format: "int32"
        idUser:
          type: "integer"
          format: "int32"
        opinion:
          type: "string"
        rating:
          type: "integer"
          format: "int32"
        photo:
          type: "string"
    TreasureStats:
      type: "object"
      properties:
        idTreasure:
          type: "integer"
          format: "int32"
        totalPlayed:
          type: "integer"
          format: "int32"
        totalFound:
          type: "integer"
          format: "int32"
        totalFavourite:
          type: "integer"
          format: "int32"
        totalReviews:
          type: "integer"
          format: "int32"
        reportQuantity:
          type: "integer"
          format: "int32"
        averageTime:
          type: "string"
    User:
      type: "object"
      properties:
        idUser:
          type: "integer"
          format: "int32"
        nickName:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        photo:
          type: "string"
        userLevel:
          type: "string"
        userRole:
          type: "string"
        favs:
          type: "array"
          items:
            $ref: "#/components/schemas/Treasures"
    Favourites:
      type: "object"
      properties:
        idUser:
          type: "integer"
          format: "int32"
        idTreasure:
          type: "integer"
          format: "int32"
    UserStats:
      type: "object"
      properties:
        idUser:
          type: "integer"
          format: "int32"
        solved:
          type: "integer"
          format: "int32"
        notSolved:
          type: "integer"
          format: "int32"
        reportQuantity:
          type: "integer"
          format: "int32"
        averageTime:
          type: "string"
    AuthResponse:
      type: "object"
      properties:
        token:
          type: "string"
        user:
          $ref: "#/components/schemas/User"
    Map:
      type: "object"
      properties: {}